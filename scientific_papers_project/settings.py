"""
Django settings for scientific_papers_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-e9sr8e9m42oamye&n-cqg&kjr^)70k^e2f0uatlhy!i&t=y#8w')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'channels',
    'django_celery_results', # Для хранения результатов задач в БД
    'django_celery_beat',    # Для периодических задач
    'adminsortable2',
    'papers.apps.PapersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'scientific_papers_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Указываем Django искать шаблоны в корневой папке 'templates'
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'scientific_papers_project.wsgi.application' # Это для обычных HTTP запросов
ASGI_APPLICATION = 'scientific_papers_project.asgi.application' # Это для Channels


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
   'default': {
       'ENGINE': 'django.db.backends.postgresql',
       'NAME': 'article',
       'USER': 'article',
       'PASSWORD': 'article',
       'HOST': '127.0.0.1',
       'PORT': '5432',
   }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LOGIN_REDIRECT_URL = 'submit_article'  # Имя URL-маршрута, куда перенаправлять после входа
LOGOUT_REDIRECT_URL = 'login'        # Имя URL-маршрута, куда перенаправлять после выхода


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# STATICFILES_DIRS = [BASE_DIR / "static"] # Общая папка для статики уровня проекта

MEDIA_URL = 'media/'
# MEDIA_ROOT = BASE_DIR / 'media' # для pathlib:
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if DEBUG:
    # STATICFILES_DIRS = (os.path.join(BASE_DIR, 'frontend'),) # здесь collectstatic также будет искать файлы
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')         # сюда collectstatic поместит найденные файлы
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    # MEDIA_URL = 'media/'
else:
    STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT')
    STATICFILES_DIRS = [BASE_DIR / 'static']


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATA_UPLOAD_MAX_NUMBER_FIELDS = None # Default: 1000

# DRF
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # По умолчанию - чтение всем, запись авторизованным
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10 # Количество элементов на странице по умолчанию
}


# --- Celery Configuration Options ---
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # URL брокера сообщений (Redis)
CELERY_RESULT_BACKEND = 'django-db' # 'redis://localhost:6379/1' # Используем django-celery-results для хранения результатов в БД
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Kiev' # часовой пояс
CELERY_TASK_TRACK_STARTED = True # Чтобы задачи отображали состояние "STARTED"
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # Для django-celery-beat

# --- Django Celery Results ---
# Уже настроено через CELERY_RESULT_BACKEND = 'django-db'
# Если используется django-celery-results, то он должен быть в INSTALLED_APPS


# --- Channel Layers Configuration ---
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('localhost', 6379)], # Адрес вашего Redis сервера
        },
    },
}


############ SOURCE PRIORITY ###############
API_SOURCE_NAMES = {
    'CROSSREF': 'crossref_api',
    'EUROPEPMC': 'europepmc_api',
    'SEMANTICSCHOLAR': 'semanticscholar_api',
    'ARXIV': 'arxiv_api',
    'PUBMED': 'pubmed_api',
    'RXIV': 'rxiv_api',           # (общее для bioRxiv/medRxiv)
    'OPENALEX': 'openalex_api',
    'UNPAYWALL': 'unpaywall_api', # Unpaywall дополняет, а не предоставляет основные метаданные
}

# Определяем порядок приоритета. Первый - самый высокий.
# PubMed часто очень авторитетен для опубликованных биомед. статей.
# Препринты (arXiv, Rxiv) обычно ниже опубликованных.
API_SOURCE_OVERALL_PRIORITY = [
    API_SOURCE_NAMES['CROSSREF'],        # Канонические метаданные публикации
    API_SOURCE_NAMES['PUBMED'],          # Авторитетный источник для биомед
    API_SOURCE_NAMES['EUROPEPMC'],       # Также авторитетен, хороший источник JATS
    API_SOURCE_NAMES['OPENALEX'],
    API_SOURCE_NAMES['ARXIV'],           # Первоисточник для препринтов
    API_SOURCE_NAMES['SEMANTICSCHOLAR'], # Обширные данные, но может быть агрегированными
    API_SOURCE_NAMES['RXIV'],            # Препринты bioRxiv/medRxiv
]

APP_EMAIL = os.getenv('APP_EMAIL', 'example@mail.com')
NCBI_API_KEY = os.getenv('NCBI_API_KEY', '')   # PubMed


OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
OPENAI_DEFAULT_MODEL = "gpt-4o-mini"
LLM_PROVIDER_FOR_ANALYSIS = "OpenAI" # или "Anthropic" и т.д.

print(f'********* APP_EMAIL: {APP_EMAIL}, NCBI_API_KEY: {NCBI_API_KEY}, OPENAI_API_KEY: {OPENAI_API_KEY}, SECRET_KEY: {SECRET_KEY}')